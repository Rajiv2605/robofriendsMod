{"version":3,"sources":["assets/loading.gif","Card.js","CardArray.js","Scroll.js","Searchbar.js","ErrorBoundary.js","LoadingScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","id","name","email","className","alt","src","CardArray","robots","map","robot","i","key","Scroll","props","style","overflow","border","height","children","Searchbar","searchChange","onChange","type","placeholder","ErrorBoundary","state","hasError","error","info","this","setState","Component","LoadingScreen","logo","App","onSearchChange","event","searchbar","target","value","onFilterSelect","searchFilter","console","log","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","document","querySelector","background","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.61430ff7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.57f3b56f.gif\";","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}`}/>\r\n            <div className=\"tc\">\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardArray = ({robots}) => {\r\n    // if(true) {\r\n    //     throw new Error(\"Vazhkaye pochu!\");\r\n    // }\r\n    return (\r\n        <div>{\r\n            robots.map((robot, i) => {\r\n                return <Card key={robots[i].id} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email} />\r\n        })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardArray;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\nreturn <div style={{overflow: 'scroll', border: '5px solid black', height: '580px'}}>{props.children}</div>\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Searchbar = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n                   onChange = {searchChange}\r\n                   type='search' placeholder='search robots...' />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbar;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError)\r\n            return <h1>Oh no :(</h1>\r\n        else\r\n            return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport logo from \"./assets/loading.gif\";\r\nimport './LoadingScreen.css';\r\n\r\nconst LoadingScreen = () => {\r\n    return(\r\n        <div className=\"loadingDiv\">\r\n            <img className=\"loadingGif\" src={logo} alt=\"loadingGif\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport CardArray from './CardArray';\r\nimport Scroll from './Scroll';\r\nimport Searchbar from './Searchbar';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport LoadingScreen from './LoadingScreen';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchbar: '',\r\n            searchFilter: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => {this.setState({robots: users})});\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchbar: event.target.value});\r\n        //console.log(event.target.value);\r\n    }\r\n\r\n    onFilterSelect = (event) => {\r\n        this.setState({searchFilter: event.target.value});\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        let filteredRobots = this.state.robots;\r\n        if(this.state.searchFilter === \"name\")\r\n            filteredRobots = this.state.robots.filter(robot => {\r\n                return robot.name.toLowerCase().includes(this.state.searchbar);\r\n            });\r\n        else if(this.state.searchFilter === \"email\")\r\n            filteredRobots = this.state.robots.filter(robot => {\r\n                return robot.email.toLowerCase().includes(this.state.searchbar);\r\n            });\r\n\r\n        if(this.state.robots.length === 0)\r\n            return(\r\n                <div>\r\n                    <LoadingScreen />\r\n                </div>\r\n            )\r\n        else {\r\n            const body = document.querySelector(\"body\");\r\n            body.style.background = \"linear-gradient(to left, rgba(7, 27, 82, 1) 0%, rgba(0, 128, 128, 1) 100%)\";\r\n\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robofriends</h1>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardArray robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                    <div className=\"searchDiv\">\r\n                        <h3 className=\"searchFor\">Search for: </h3>\r\n                        <select id=\"filterChoice\" onChange={this.onFilterSelect}>\r\n                            <option value=\"defaultChoice\">select</option>\r\n                            <option value=\"name\">Name</option>\r\n                            <option value=\"email\">Email</option>\r\n                        </select>\r\n                        <Searchbar searchChange = {this.onSearchChange} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'; // does DOM manipulation (core component of React)\nimport ReactDOM from 'react-dom'; // library used for DOM in websites\nimport './index.css'; // CSS can be added for every component\n//import Card from './Card'; // if there is no extention React assumes it is JS\n// The files of components start with a capital letter\nimport 'tachyons';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />\n                 , document.getElementById('root')); // render <App />\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}